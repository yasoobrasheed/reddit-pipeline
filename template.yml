AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: SAM template for reddit_pipeline

Globals:
  Function:
    Timeout: 3
    Environment:
      Variables:
        REDDIT_APP_NAME: MyDataPipelineApp
        REDDIT_USERNAME: Impressive_Being_607
        REDDIT_APP_SECRET: '{{resolve:secretsmanager:reddit_secrets:SecretString:REDDIT_APP_SECRET}}'
        REDDIT_APP_ID: '{{resolve:secretsmanager:reddit_secrets:SecretString:REDDIT_APP_ID}}'
        DB_USERNAME: '{{resolve:secretsmanager:database_secrets:SecretString:DB_USERNAME}}'
        DB_PASSWORD: '{{resolve:secretsmanager:database_secrets:SecretString:DB_PASSWORD}}'
        DB_ENDPOINT: '{{resolve:secretsmanager:database_secrets:SecretString:DB_ENDPOINT}}'
        DB_PORT: '{{resolve:secretsmanager:database_secrets:SecretString:DB_PORT}}'
        DB_NAME: '{{resolve:secretsmanager:database_secrets:SecretString:DB_NAME}}'

Resources:
  # LAMBDA
  SubredditStreamFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: subreddit-stream-function
      CodeUri: app/lambdas/
      Handler: subreddit_stream.lambda_handler
      Runtime: python3.8
      Timeout: 60
      Role: !GetAtt MyDataPipelineLambdaFunctionRole.Arn
      Events:
        ScheduledEvent:
          Name: Every5min
          Type: Schedule
          Properties:
            Schedule: rate(5 minutes) 
  WriteSubredditToDBFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: write-subreddit-to-db-function
      CodeUri: app/lambdas/
      Handler: write_subreddit_stream_to_db.lambda_handler
      Runtime: python3.8
      Timeout: 30
      Role: !GetAtt MyDataPipelineLambdaFunctionRole.Arn
      Events:
        SubredditStreamQueue:
          Type: SQS
          Properties:
            Queue: !GetAtt SubredditStreamQueue.Arn
            BatchSize: 10
  # SQS
  SubredditStreamQueue:
    Type: AWS::SQS::Queue
    Description: Process messages from subreddit-stream-function
    Properties:
      QueueName: subreddit-stream-queue
  # ROLE
  MyDataPipelineLambdaFunctionRole:
    Type: AWS::IAM::Role
    Properties:
      Path: /
      RoleName: !Sub "${AWS::StackName}-MyDataPipelineLambdaFunctionRole"
      ManagedPolicyArns:
        - 'arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole'
        - 'arn:aws:iam::aws:policy/service-role/AWSLambdaVPCAccessExecutionRole'
        - 'arn:aws:iam::aws:policy/AmazonSQSFullAccess'
        - 'arn:aws:iam::aws:policy/AmazonRDSFullAccess'
      AssumeRolePolicyDocument:
        Statement:
          - 
            Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action:
              - 'sts:AssumeRole'
